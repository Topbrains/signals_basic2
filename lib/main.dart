import 'package:flutter/material.dart';
import 'package:signals/signals_flutter.dart';

void main() {
  runApp(const App());
}

class App extends StatelessWidget {
  const App({super.key});
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Signals Effect',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: HomePage(title: 'Signals: Use of effect'),
    );
  }
}

class HomePage extends StatelessWidget {
  HomePage({super.key, required this.title});
  final String title;

  final _counter = signal(0);

  void _incrementCounter() {
    // Schau, Mutter, nicht ein setState(() {});
    _counter.value++;
  }

  final List<int> list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

  @override
  Widget build(BuildContext context) {
    debugPrint('======> HomePage build <=======');

    final isCounterEven = computed(() => _counter.value.isEven);

    // To display the sorted list
    final intListSignal = listSignal(<int>[]);

    // To hold the pointer to the stop signal for the effect
    void Function() disposeEffect;

    // Initialize the effect
    disposeEffect = effect(() {});

    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(title),
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(32.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: <Widget>[
              const Text(
                'Showing the use of effect to display a sorted list and how we can start and stop the effect function. Notice that this HomePage widget is a StatelessWidget and therefore we can not use setState().\n\nAlso watch the times that the build function of this HomePage is called in the debug console',
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 32.0),
              const Text('Original List:'),
              Text(list.toString()),
              const SizedBox(height: 32.0),
              const Text(
                'You have pushed the button this many times:',
              ),
              Watch((context) {
                return Column(
                  children: [
                    Text('${_counter.value}',
                        style: TextStyle(
                            color:
                                isCounterEven.value ? Colors.blue : Colors.red,
                            fontSize: 25)),
                    const SizedBox(height: 32.0),
                    const Text('Generated by the effect function:'),
                    Text(intListSignal.value.toString(),
                        style: TextStyle(
                            color:
                                isCounterEven.value ? Colors.blue : Colors.red,
                            fontSize: 25))
                  ],
                );
              }),
            ],
          ),
        ),
      ),
      floatingActionButton: Row(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          FloatingActionButton(
            onPressed: _incrementCounter,
            tooltip: 'Increment Counter and Sort',
            child: const Icon(Icons.add),
          ),
          const SizedBox(width: 32.0),
          FloatingActionButton(
            onPressed: () {
              intListSignal.value = [];

              // Creates the effect and stores a pointer in disposeEffect so that
              // later we can come back and cancel it
              disposeEffect = effect(() {
                intListSignal.value =
                    (_counter.value.isEven ? [...list] : [...list].reversed)
                        .toList();
                // Every time intListSignal changes, this SnackBar will show
                if (context.mounted) {
                  // Remove any existing snackbar
                  ScaffoldMessenger.of(context).removeCurrentSnackBar();
                  // Show SnackBar
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text(
                        'Signal Generated SnackBar: ${intListSignal.value} ',
                        style: const TextStyle(color: Colors.black),
                      ),
                      backgroundColor:
                          Colors.cyan, // Customize the background color
                    ),
                  );
                }
              });
            },
            tooltip: 'Start Effect',
            child: const Icon(Icons.play_arrow),
          ),
          const SizedBox(width: 32.0),
          FloatingActionButton(
            onPressed: () {
              // Cancel previous if any
              ScaffoldMessenger.of(context).removeCurrentSnackBar();
              // Show message indicating cancelled
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(
                  content: Text(
                    'Effect Cancelled',
                    style: TextStyle(color: Colors.black),
                  ),
                  backgroundColor:
                      Colors.orange, // Customize the background color
                ),
              );
              // Notice that we need to place this after showSnackBar()
              disposeEffect();
              intListSignal.value = [];
            },
            tooltip: 'Stop Effect',
            child: const Icon(Icons.stop),
          ),
        ],
      ),
    );
  }
}
